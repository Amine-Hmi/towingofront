{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar lodash_1 = require(\"lodash\");\n\nvar Country = function () {\n  function Country() {\n    _classCallCheck(this, Country);\n\n    this.countryCodes = [];\n    this.countriesData = null;\n  }\n\n  _createClass(Country, [{\n    key: \"setCustomCountriesData\",\n    value: function setCustomCountriesData(json) {\n      this.countriesData = json;\n    }\n  }, {\n    key: \"addCountryCode\",\n    value: function addCountryCode(iso2, dialCode, priority) {\n      if (!(dialCode in this.countryCodes)) {\n        this.countryCodes[dialCode] = [];\n      }\n\n      var index = priority || 0;\n      this.countryCodes[dialCode][index] = iso2;\n    }\n  }, {\n    key: \"getAll\",\n    value: function getAll() {\n      if (!this.countries) {\n        this.countries = lodash_1.orderBy(this.countriesData || require(\"./resources/countries.json\"), ['name'], ['asc']);\n      }\n\n      return this.countries;\n    }\n  }, {\n    key: \"getCountryCodes\",\n    value: function getCountryCodes() {\n      var _this = this;\n\n      if (!this.countryCodes.length) {\n        this.getAll().forEach(function (country) {\n          _this.addCountryCode(country.iso2, country.dialCode, country.priority);\n\n          if (country.areaCodes) {\n            country.areaCodes.forEach(function (areaCode) {\n              _this.addCountryCode(country.iso2, country.dialCode + areaCode);\n            });\n          }\n        });\n      }\n\n      return this.countryCodes;\n    }\n  }, {\n    key: \"getCountryDataByCode\",\n    value: function getCountryDataByCode(iso2) {\n      return lodash_1.find(this.getAll(), function (country) {\n        return country.iso2 === iso2;\n      });\n    }\n  }]);\n\n  return Country;\n}();\n\nexports.default = new Country();","map":{"version":3,"sources":["../src/country.tsx"],"names":[],"mappings":";;;;;;;;;;AAAA,IAAA,QAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;IAEM,O;AAOF,qBAAA;AAAA;;AACI,SAAK,YAAL,GAAoB,EAApB;AAEA,SAAK,aAAL,GAAqB,IAArB;AACH;;;;WAED,gCAAuB,IAAvB,EAA2B;AACvB,WAAK,aAAL,GAAqB,IAArB;AACH;;;WAED,wBAAe,IAAf,EAAqB,QAArB,EAAuC,QAAvC,EAAgD;AAC5C,UAAI,EAAE,QAAQ,IAAI,KAAK,YAAnB,CAAJ,EAAsC;AAClC,aAAK,YAAL,CAAkB,QAAlB,IAA8B,EAA9B;AACH;;AAED,UAAM,KAAK,GAAG,QAAQ,IAAI,CAA1B;AACA,WAAK,YAAL,CAAkB,QAAlB,EAA4B,KAA5B,IAAqC,IAArC;AACH;;;WAED,kBAAM;AACF,UAAI,CAAC,KAAK,SAAV,EAAqB;AACjB,aAAK,SAAL,GAAiB,QAAA,CAAA,OAAA,CACb,KAAK,aAAL,IAAsB,OAAO,8BADhB,EAEb,CAAC,MAAD,CAFa,EAGb,CAAC,KAAD,CAHa,CAAjB;AAKH;;AAED,aAAO,KAAK,SAAZ;AACH;;;WAED,2BAAe;AAAA;;AACX,UAAI,CAAC,KAAK,YAAL,CAAkB,MAAvB,EAA+B;AAC3B,aAAK,MAAL,GAAc,OAAd,CAAsB,UAAC,OAAD,EAAY;AAC9B,UAAA,KAAI,CAAC,cAAL,CAAoB,OAAO,CAAC,IAA5B,EAAkC,OAAO,CAAC,QAA1C,EAAoD,OAAO,CAAC,QAA5D;;AACA,cAAI,OAAO,CAAC,SAAZ,EAAuB;AACnB,YAAA,OAAO,CAAC,SAAR,CAAkB,OAAlB,CAA0B,UAAC,QAAD,EAAa;AACnC,cAAA,KAAI,CAAC,cAAL,CAAoB,OAAO,CAAC,IAA5B,EAAkC,OAAO,CAAC,QAAR,GAAmB,QAArD;AACH,aAFD;AAGH;AACJ,SAPD;AAQH;;AACD,aAAO,KAAK,YAAZ;AACH;;;WAED,8BAAqB,IAArB,EAAyB;AACrB,aAAO,QAAA,CAAA,IAAA,CAAK,KAAK,MAAL,EAAL,EAAoB,UAAC,OAAD;AAAA,eAAa,OAAO,CAAC,IAAR,KAAiB,IAA9B;AAAA,OAApB,CAAP;AACH;;;;;;AAGL,OAAA,CAAA,OAAA,GAAe,IAAI,OAAJ,EAAf","sourcesContent":["import { find, orderBy } from 'lodash';\n\nclass Country {\n    private countryCodes: any[];\n\n    private countriesData: any;\n\n    private countries: any;\n\n    constructor() {\n        this.countryCodes = [];\n\n        this.countriesData = null;\n    }\n\n    setCustomCountriesData(json) {\n        this.countriesData = json;\n    }\n\n    addCountryCode(iso2, dialCode: string, priority?) {\n        if (!(dialCode in this.countryCodes)) {\n            this.countryCodes[dialCode] = [];\n        }\n\n        const index = priority || 0;\n        this.countryCodes[dialCode][index] = iso2;\n    }\n\n    getAll() {\n        if (!this.countries) {\n            this.countries = orderBy(\n                this.countriesData || require('./resources/countries.json'), // eslint-disable-line global-require\n                ['name'],\n                ['asc'],\n            );\n        }\n\n        return this.countries;\n    }\n\n    getCountryCodes() {\n        if (!this.countryCodes.length) {\n            this.getAll().forEach((country) => {\n                this.addCountryCode(country.iso2, country.dialCode, country.priority);\n                if (country.areaCodes) {\n                    country.areaCodes.forEach((areaCode) => {\n                        this.addCountryCode(country.iso2, country.dialCode + areaCode);\n                    });\n                }\n            });\n        }\n        return this.countryCodes;\n    }\n\n    getCountryDataByCode(iso2) {\n        return find(this.getAll(), (country) => country.iso2 === iso2);\n    }\n}\n\nexport default new Country();\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}