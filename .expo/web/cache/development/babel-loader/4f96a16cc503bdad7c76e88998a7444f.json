{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\PFE\\\\ubersdk40\\\\src\\\\Screen\\\\SignUp\\\\Google\\\\GAuth.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from \"react\";\nimport * as WebBrowser from \"expo-web-browser\";\nimport * as Google from \"expo-auth-session/providers/google\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport 'inline-dotenv';\nWebBrowser.maybeCompleteAuthSession();\nexport default function GAuth() {\n  var _Google$useAuthReques = Google.useAuthRequest({\n    expoClientId: process && process.env && process.env.GOOGLE_CLIENT_ID || undefined,\n    iosClientId: process && process.env && process.env.GOOGLE_CLIENT_ID || undefined,\n    androidClientId: process && process.env && process.env.GOOGLE_CLIENT_ID || undefined,\n    webClientId: process && process.env && process.env.GOOGLE_CLIENT_ID || undefined,\n    scopes: [\"profile\", \"email\"]\n  }),\n      _Google$useAuthReques2 = _slicedToArray(_Google$useAuthReques, 3),\n      request = _Google$useAuthReques2[0],\n      response = _Google$useAuthReques2[1],\n      promptAsync = _Google$useAuthReques2[2];\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      user = _React$useState2[0],\n      setUser = _React$useState2[1];\n\n  Google.useIdTokenAuthRequest;\n  React.useEffect(function () {\n    if ((response == null ? void 0 : response.type) === \"success\") {\n      var userInfoResponse = function userInfoResponse() {\n        var authentication;\n        return _regeneratorRuntime.async(function userInfoResponse$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _regeneratorRuntime.awrap(fetch(\"https://www.googleapis.com/oauth2/v3/userinfo?access_token=\" + authentication.accessToken));\n\n              case 2:\n                authentication = response.authentication;\n                setUser(userInfoResponse);\n                console.log(\"userinfos:\", user);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      };\n    } else {}\n  }, [response]);\n  return React.createElement(View, {\n    style: {\n      marginVertical: 10,\n      marginHorizontal: 15\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, React.createElement(Button, {\n    color: \"red\",\n    disabled: !request,\n    title: \"Login with Google account\",\n    onPress: function onPress() {\n      promptAsync();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  profile: {\n    alignItems: \"center\",\n    paddingTop: 50\n  }\n});\n\nfunction Profile(_ref) {\n  var user = _ref.user;\n  return React.createElement(View, {\n    style: styles.profile,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, React.createElement(Image, {\n    source: {\n      uri: user.picture.data.url\n    },\n    style: styles.image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }), React.createElement(Text, {\n    style: styles.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, user.name), React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, \"ID: \", user.id));\n}","map":{"version":3,"sources":["D:/PFE/ubersdk40/src/Screen/SignUp/Google/GAuth.js"],"names":["React","WebBrowser","Google","maybeCompleteAuthSession","GAuth","useAuthRequest","expoClientId","iosClientId","androidClientId","webClientId","scopes","request","response","promptAsync","useState","user","setUser","useIdTokenAuthRequest","useEffect","type","userInfoResponse","fetch","authentication","accessToken","console","log","marginVertical","marginHorizontal","styles","StyleSheet","create","profile","alignItems","paddingTop","Profile","uri","picture","data","url","image","name","id"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport * as WebBrowser from \"expo-web-browser\";\r\nimport * as Google from \"expo-auth-session/providers/google\";\r\nimport { Button, View, StyleSheet, Image, Text } from \"react-native\";\r\nimport 'inline-dotenv'\r\n\r\nWebBrowser.maybeCompleteAuthSession();\r\n\r\nexport default function GAuth() {\r\n  const [request, response, promptAsync] = Google.useAuthRequest({\r\n    expoClientId:\r\n      process.env.GOOGLE_CLIENT_ID,\r\n    iosClientId:\r\n      process.env.GOOGLE_CLIENT_ID,\r\n    androidClientId:\r\n      process.env.GOOGLE_CLIENT_ID,\r\n    webClientId:\r\n      process.env.GOOGLE_CLIENT_ID,\r\n    scopes: [\"profile\", \"email\"],\r\n  });\r\n  const [user, setUser] = React.useState(null);\r\n\r\n  //functinal google oauth apis\r\n  //https://www.googleapis.com/oauth2/v3/tokeninfo?access_token=response.access\r\n  //https://www.googleapis.com/oauth2/v3/userinfo?access_token=acc\r\n  \r\n\r\n  Google.useIdTokenAuthRequest;\r\n  // const redirect=async ()=> {\r\n  // let result = await AuthSession.startAsync({\r\n  //   authUrl:\r\n  //     `https://accounts.google.com/o/oauth2/v2/auth?` +\r\n  //     `&client_id=${googleWebAppId}` +\r\n  //     `&redirect_uri=${encodeURIComponent(redirectUrl)}` +\r\n  //     `&response_type=code` +\r\n  //     `&access_type=offline` +\r\n  //     `&scope=profile`,\r\n  // });\r\n  // }\r\n  React.useEffect(() => {\r\n    if (response?.type === \"success\") {\r\n      // // console.log('Access Token: ' + JSON.stringify(response.authentication.accessToken));\r\n      // console.log(`token+${authentication.accessToken}`)\r\n      const userInfoResponse = async () => {\r\n        await fetch(\r\n          `https://www.googleapis.com/oauth2/v3/userinfo?access_token=${authentication.accessToken}`\r\n          );\r\n          const { authentication } = response;\r\n      setUser(userInfoResponse);\r\n      console.log(\"userinfos:\",user)\r\n        }\r\n    } else {\r\n      // console.log('response: ' + response.JSON.stringify());\r\n    }\r\n  }, [response]);\r\n\r\n  return (\r\n    <View style={{ marginVertical: 10, marginHorizontal: 15 }}>\r\n      <Button\r\n        color=\"red\"\r\n        disabled={!request}\r\n        title=\"Login with Google account\"\r\n        onPress={() => {\r\n          promptAsync();\r\n        }}\r\n      />\r\n    </View>\r\n  );\r\n}\r\nconst styles = StyleSheet.create({\r\n  profile: {\r\n    alignItems: \"center\",\r\n    paddingTop: 50,\r\n  },\r\n});\r\n\r\nfunction Profile({ user }) {\r\n  return (\r\n    <View style={styles.profile}>\r\n      <Image source={{ uri: user.picture.data.url }} style={styles.image} />\r\n      <Text style={styles.name}>{user.name}</Text>\r\n      <Text>ID: {user.id}</Text>\r\n    </View>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}